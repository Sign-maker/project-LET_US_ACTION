{"version":3,"file":"static/js/659.ea74fd20.chunk.js","mappings":"sRAwRA,IArJiB,WACf,IAAAA,GAA4BC,EAAAA,EAAAA,KAApBC,EAAKF,EAALE,MAAOC,EAAQH,EAARG,SACTC,GAAWC,EAAAA,EAAAA,MACjBC,GAAwCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAE9BI,EAA2B,WAC/BD,GAAiBD,EACnB,EAEMG,EAAiC,YAAtBT,EAASU,SAEpBC,EAAgBF,EAClB,CAAEG,MAAO,GAAIC,SAAU,GAAIC,gBAAiB,IAC5C,CAAEF,MAAO,GAAIC,SAAU,IAErBE,EAAmBC,EAAAA,IAAUC,EAAAA,EAAAA,GAAC,CAClCL,MAAOI,EAAAA,KACJJ,MAAM,yBACNM,SAAS,qBACZL,SAAUG,EAAAA,KACPG,IAAI,EAAG,0CACPC,IAAI,GAAI,+CACRF,SAAS,yBACRT,GAAY,CACdK,gBAAiBE,EAAAA,KACdK,MAAM,CAACL,EAAAA,GAAQ,YAAa,MAAO,wBACnCE,SAAS,mCAIVI,EAAY,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,EAAOC,EAAMC,GAAA,IAAAC,EAAAC,EAAAlB,EAAAC,EAAAkB,EAAA,OAAAN,IAAAA,MAAA,SAAAO,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGY,OAHRL,EAAaD,EAAbC,cAAeC,EAASF,EAATE,UAASE,EAAAC,KAAA,EAElDrB,EAAoBe,EAApBf,MAAOC,EAAac,EAAbd,SACTkB,EAAStB,EAAWV,EAAWD,EAAKkC,EAAAE,KAAA,EACpCH,EAAO,CAAEnB,MAAAA,EAAOC,SAAAA,IAAY,KAAD,EAC7BJ,GAAUqB,IAAYE,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAG,GAAAH,EAAA,SAE1BI,QAAQC,MAAM,GAADC,OAAI7B,EAAW,UAAY,UAAS,YAAAuB,EAAAG,IAAmB,QAE/C,OAF+CH,EAAAC,KAAA,GAEpEJ,GAAc,GAAOG,EAAAO,OAAA,6BAAAP,EAAAQ,OAAA,GAAAd,EAAA,wBAExB,gBAXiBe,EAAAC,GAAA,OAAAnB,EAAAoB,MAAA,KAAAC,UAAA,KAalB,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAAA,gBAAoBC,SAAA,EAClCC,EAAAA,EAAAA,KAAA,MAAIH,UAAWC,EAAAA,EAAAA,MAAUC,SAAEvC,EAAW,UAAY,aAClDwC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACLvC,cAAeA,EACfI,iBAAkBA,EAClBoC,SAAU7B,EACV8B,gBAAgB,EAChBC,kBAAkB,EAAKL,SAEtB,SAAAM,GAAM,OACLT,EAAAA,EAAAA,MAACU,EAAAA,GAAI,CAACT,UAAWC,EAAAA,EAAAA,KAASC,SAAA,EACxBH,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAAA,eAAmBC,SAAA,EACjCC,EAAAA,EAAAA,KAAA,SAAOH,UAAWC,EAAAA,EAAAA,MAAWS,QAAQ,QAAOR,SAAC,sBAG7CC,EAAAA,EAAAA,KAACQ,EAAAA,GAAK,CACJX,UAAS,GAAAR,OAAKS,EAAAA,EAAAA,MAAS,KAAAT,OACrBgB,EAAOI,OAAO9C,OAAS0C,EAAOK,QAAQ/C,MAClCmC,EAAAA,EAAAA,WACA,IAENa,KAAK,QACLC,KAAK,QACLC,YAAY,YAEdb,EAAAA,EAAAA,KAACc,EAAAA,GAAY,CACXF,KAAK,QACLG,UAAU,MACVlB,UAAWC,EAAAA,EAAAA,mBAIfF,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAAA,eAAmBC,SAAA,EACjCC,EAAAA,EAAAA,KAAA,SAAOH,UAAWC,EAAAA,EAAAA,MAAWS,QAAQ,WAAUR,SAAC,yBAGhDH,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAAA,eAAmBC,SAAA,EACjCC,EAAAA,EAAAA,KAACQ,EAAAA,GAAK,CACJX,UAAS,GAAAR,OAAKS,EAAAA,EAAAA,MAAS,KAAAT,OACrBgB,EAAOI,OAAO7C,UAAYyC,EAAOK,QAAQ9C,SACrCkC,EAAAA,EAAAA,WACA,IAENa,KAAMtD,EAAe,OAAS,WAC9BuD,KAAK,WACLC,YAAY,cAEdb,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAAA,EAAAA,sBAA0BC,SACvC1C,GACC2C,EAAAA,EAAAA,KAACgB,EAAAA,IAAY,CACXnB,UAAWC,EAAAA,EAAAA,aACXmB,QAAS1D,KAGXyC,EAAAA,EAAAA,KAACkB,EAAAA,IAAiB,CAChBrB,UAAWC,EAAAA,EAAAA,aACXmB,QAAS1D,UAKjByC,EAAAA,EAAAA,KAACc,EAAAA,GAAY,CACXF,KAAK,WACLG,UAAU,MACVlB,UAAWC,EAAAA,EAAAA,kBAIdtC,IACCoC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAAA,eAAmBC,SAAA,EACjCC,EAAAA,EAAAA,KAAA,SAAOH,UAAWC,EAAAA,EAAAA,MAAWS,QAAQ,kBAAiBR,SAAC,0BAGvDC,EAAAA,EAAAA,KAACQ,EAAAA,GAAK,CACJX,UAAS,GAAAR,OAAKS,EAAAA,EAAAA,MAAS,KAAAT,OACrBgB,EAAOI,OAAO5C,iBACdwC,EAAOK,QAAQ7C,gBACXiC,EAAAA,EAAAA,WACA,IAENa,KAAK,WACLC,KAAK,kBACLC,YAAY,qBAEdb,EAAAA,EAAAA,KAACc,EAAAA,GAAY,CACXF,KAAK,kBACLG,UAAU,MACVlB,UAAWC,EAAAA,EAAAA,mBAKjBE,EAAAA,EAAAA,KAAA,UAAQH,UAAWC,EAAAA,EAAAA,OAAYa,KAAK,SAAQZ,SACzCvC,EAAW,UAAY,cAErB,KAGXwC,EAAAA,EAAAA,KAACmB,EAAAA,GAAO,CAACC,GAAI5D,EAAW,UAAY,UAAWqC,UAAWC,EAAAA,EAAAA,KAASC,SAChEvC,EAAW,UAAY,cAIhC,C,wECxQA,UAVmB,WACjB,OACEwC,EAAAA,EAAAA,KAAA,WAASH,UAAS,GAAAR,OAAKS,EAAAA,EAAAA,gBAAmB,cAAaC,UACrDC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACqB,EAAAA,EAAQ,OAIjB,C,qBCXA,KAAgB,gBAAkB,kCAAkC,gBAAkB,kCAAkC,MAAQ,wBAAwB,KAAO,uBAAuB,MAAQ,wBAAwB,eAAiB,iCAAiC,MAAQ,wBAAwB,sBAAwB,wCAAwC,eAAiB,iCAAiC,aAAe,+BAA+B,OAAS,yBAAyB,KAAO,uBAAuB,aAAe,+BAA+B,WAAa,6B","sources":["components/AuthForm/AuthForm.jsx","pages/SignupPage/SignupPage.jsx","webpack://react-homework-template/./src/components/AuthForm/AuthForm.module.css?9658"],"sourcesContent":["// import { useDispatch } from 'react-redux';\n// import { useState } from 'react';\n// import { Formik, Form, Field, ErrorMessage } from 'formik';\n// import * as Yup from 'yup';\n// import { logIn, register } from 'redux-store/auth/authOperations';\n// import css from './AuthForm.module.css';\n// import { HiOutlineEyeSlash, HiOutlineEye } from 'react-icons/hi2';\n// import { NavLink } from 'react-router-dom';\n\n// const AuthForm = () => {\n//   const dispatch = useDispatch();\n//   const [showPassword, setShowPassword] = useState(false);\n\n//   const togglePasswordVisibility = () => {\n//     setShowPassword(!showPassword);\n//   };\n\n//   return (\n//     <div className={css.signinContainer}>\n//       <h2 className={css.title}>Sign In</h2>\n//       <Formik\n//         initialValues={{ email: '', password: '' }}\n//         validationSchema={Yup.object({\n//           email: Yup.string()\n//             .email('Invalid email address')\n//             .required('Email is required'),\n//           password: Yup.string()\n//             .min(8, 'Password must be at least 8 characters')\n//             .max(64, 'Password must be no more than 64 characters')\n//             .required('Password is required'),\n//         })}\n//         onSubmit={(values, { setSubmitting, resetForm }) => {\n//           dispatch(\n//             logIn({\n//               email: values.email,\n//               password: values.password,\n//             })\n//           )\n//             .catch(error => {\n//               console.error('Login failed:', error);\n//             })\n//             .finally(() => {\n//               setSubmitting(false);\n//               resetForm();\n//             });\n//         }}\n//         validateOnBlur={true}\n//         validateOnChange={true}\n//       >\n//         {formik => (\n//           <Form className={css.form}>\n//             <div className={css.inputContainer}>\n//               <label className={css.label} htmlFor=\"email\">\n//                 Enter your email\n//               </label>\n//               <Field\n//                 className={`${css.input} ${\n//                   formik.errors.email && formik.touched.email\n//                     ? css.inputError\n//                     : ''\n//                 }`}\n//                 type=\"email\"\n//                 name=\"email\"\n//                 placeholder=\"E-mail\"\n//               />\n//               <ErrorMessage\n//                 name=\"email\"\n//                 component=\"div\"\n//                 className={css.errorMessage}\n//               />\n//             </div>\n\n//             <div className={css.inputContainer}>\n//               <label className={css.label} htmlFor=\"password\">\n//                 Enter your password\n//               </label>\n//               <div className={css.fieldContainer}>\n//                 <Field\n//                   className={`${css.input} ${\n//                     formik.errors.password && formik.touched.password\n//                       ? css.inputError\n//                       : ''\n//                   }`}\n//                   type={showPassword ? 'text' : 'password'}\n//                   name=\"password\"\n//                   placeholder=\"Password\"\n//                 />\n//                 <div className={css.passwordIconContainer}>\n//                   {showPassword ? (\n//                     <HiOutlineEye\n//                       className={css.passwordIcon}\n//                       onClick={togglePasswordVisibility}\n//                     />\n//                   ) : (\n//                     <HiOutlineEyeSlash\n//                       className={css.passwordIcon}\n//                       onClick={togglePasswordVisibility}\n//                     />\n//                   )}\n//                 </div>\n//               </div>\n//               <ErrorMessage\n//                 name=\"password\"\n//                 component=\"div\"\n//                 className={css.errorMessage}\n//               />\n//             </div>\n\n//             <button className={css.button} type=\"submit\">\n//               Sign In\n//             </button>\n//           </Form>\n//         )}\n//       </Formik>\n//       <NavLink to=\"/signup\" className={css.link}>\n//         Sign up\n//       </NavLink>\n//     </div>\n//   );\n// };\n\n// export default AuthForm;\n\nimport { useState } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport css from './AuthForm.module.css';\nimport { HiOutlineEyeSlash, HiOutlineEye } from 'react-icons/hi2';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport { useAuth } from 'hooks/useAuth';\n\nconst AuthForm = () => {\n  const { logIn, register } = useAuth();\n  const location = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const togglePasswordVisibility = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const isSignUp = location.pathname === '/signup';\n\n  const initialValues = isSignUp\n    ? { email: '', password: '', confirmPassword: '' }\n    : { email: '', password: '' };\n\n  const validationSchema = Yup.object({\n    email: Yup.string()\n      .email('Invalid email address')\n      .required('Email is required'),\n    password: Yup.string()\n      .min(8, 'Password must be at least 8 characters')\n      .max(64, 'Password must be no more than 64 characters')\n      .required('Password is required'),\n    ...(isSignUp && {\n      confirmPassword: Yup.string()\n        .oneOf([Yup.ref('password'), null], 'Passwords must match')\n        .required('Confirm password is required'),\n    }),\n  });\n\n  const handleSubmit = async (values, { setSubmitting, resetForm }) => {\n    try {\n      const { email, password } = values;\n      const action = isSignUp ? register : logIn;\n      await action({ email, password });\n      if (isSignUp) resetForm();\n    } catch (error) {\n      console.error(`${isSignUp ? 'Sign Up' : 'Sign In'} failed:`, error);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <div className={css.signinContainer}>\n      <h2 className={css.title}>{isSignUp ? 'Sign Up' : 'Sign In'}</h2>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n        validateOnBlur={true}\n        validateOnChange={true}\n      >\n        {formik => (\n          <Form className={css.form}>\n            <div className={css.inputContainer}>\n              <label className={css.label} htmlFor=\"email\">\n                Enter your email\n              </label>\n              <Field\n                className={`${css.input} ${\n                  formik.errors.email && formik.touched.email\n                    ? css.inputError\n                    : ''\n                }`}\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"E-mail\"\n              />\n              <ErrorMessage\n                name=\"email\"\n                component=\"div\"\n                className={css.errorMessage}\n              />\n            </div>\n\n            <div className={css.inputContainer}>\n              <label className={css.label} htmlFor=\"password\">\n                Enter your password\n              </label>\n              <div className={css.fieldContainer}>\n                <Field\n                  className={`${css.input} ${\n                    formik.errors.password && formik.touched.password\n                      ? css.inputError\n                      : ''\n                  }`}\n                  type={showPassword ? 'text' : 'password'}\n                  name=\"password\"\n                  placeholder=\"Password\"\n                />\n                <div className={css.passwordIconContainer}>\n                  {showPassword ? (\n                    <HiOutlineEye\n                      className={css.passwordIcon}\n                      onClick={togglePasswordVisibility}\n                    />\n                  ) : (\n                    <HiOutlineEyeSlash\n                      className={css.passwordIcon}\n                      onClick={togglePasswordVisibility}\n                    />\n                  )}\n                </div>\n              </div>\n              <ErrorMessage\n                name=\"password\"\n                component=\"div\"\n                className={css.errorMessage}\n              />\n            </div>\n\n            {isSignUp && (\n              <div className={css.inputContainer}>\n                <label className={css.label} htmlFor=\"confirmPassword\">\n                  Repeat your password\n                </label>\n                <Field\n                  className={`${css.input} ${\n                    formik.errors.confirmPassword &&\n                    formik.touched.confirmPassword\n                      ? css.inputError\n                      : ''\n                  }`}\n                  type=\"password\"\n                  name=\"confirmPassword\"\n                  placeholder=\"Repeat Password\"\n                />\n                <ErrorMessage\n                  name=\"confirmPassword\"\n                  component=\"div\"\n                  className={css.errorMessage}\n                />\n              </div>\n            )}\n\n            <button className={css.button} type=\"submit\">\n              {isSignUp ? 'Sign Up' : 'Sign In'}\n            </button>\n          </Form>\n        )}\n      </Formik>\n      <NavLink to={isSignUp ? '/signin' : '/signup'} className={css.link}>\n        {isSignUp ? 'Sign In' : 'Sign Up'}\n      </NavLink>\n    </div>\n  );\n};\n\nexport default AuthForm;\n","import React from 'react';\nimport AuthForm from 'components/AuthForm/AuthForm';\nimport css from '../../components/AuthForm/AuthForm.module.css';\n\nconst SignupPage = () => {\n  return (\n    <section className={`${css.AuthFormSection} container`}>\n      <div>\n        <AuthForm />\n      </div>\n    </section>\n  );\n};\n\nexport default SignupPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"AuthFormSection\":\"AuthForm_AuthFormSection__Su+Kz\",\"signinContainer\":\"AuthForm_signinContainer__C+Gai\",\"title\":\"AuthForm_title__nrVeh\",\"form\":\"AuthForm_form__N+Fyz\",\"label\":\"AuthForm_label__-RWhN\",\"fieldContainer\":\"AuthForm_fieldContainer__txbFE\",\"input\":\"AuthForm_input__dB7h2\",\"passwordIconContainer\":\"AuthForm_passwordIconContainer__J7eew\",\"inputContainer\":\"AuthForm_inputContainer__44gmQ\",\"passwordIcon\":\"AuthForm_passwordIcon__eKLRo\",\"button\":\"AuthForm_button__+RFEI\",\"link\":\"AuthForm_link__3I+HY\",\"errorMessage\":\"AuthForm_errorMessage__poTln\",\"inputError\":\"AuthForm_inputError__pMkyj\"};"],"names":["_useAuth","useAuth","logIn","register","location","useLocation","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","togglePasswordVisibility","isSignUp","pathname","initialValues","email","password","confirmPassword","validationSchema","Yup","_objectSpread","required","min","max","oneOf","handleSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","values","_ref","setSubmitting","resetForm","action","_context","prev","next","t0","console","error","concat","finish","stop","_x","_x2","apply","arguments","_jsxs","className","css","children","_jsx","Formik","onSubmit","validateOnBlur","validateOnChange","formik","Form","htmlFor","Field","errors","touched","type","name","placeholder","ErrorMessage","component","HiOutlineEye","onClick","HiOutlineEyeSlash","NavLink","to","AuthForm"],"sourceRoot":""}